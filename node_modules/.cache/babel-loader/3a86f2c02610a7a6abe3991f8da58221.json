{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport ActionTypes from \"../constants/ActionTypes\";\nimport APICaller from \"utils/APICaller\";\nexport function* getItems() {\n  const filters = yield select(state => state.itemsReducer.filters);\n  let {\n    search = \"\",\n    // sort = \"\",\n    //  order = \"\",\n    region = \"\",\n    limit = 40,\n    skip = 0\n  } = filters;\n  let url = `list?limit=${limit}`;\n\n  if (skip) {\n    url = `${url}&start=${skip}`;\n  }\n\n  if (search.length && region) {\n    search = search.trim().toLowerCase();\n    url = `${url}&name=${search}&region=${region}`;\n  }\n\n  if (search.length && !region) {\n    search = search.trim().toLowerCase();\n    url = `${url}&name=${search}`;\n  }\n\n  {\n    /*if (sort.length || order.length) {\r\n     sort = sort && order ? `${sort},${order}` : \"\";\r\n     url = `${url}&sort=${sort}`;\r\n    }*/\n  }\n\n  if (search.length === 0 && region) {\n    url = `${url}&region=${region}`;\n  }\n\n  try {\n    const response = yield call(APICaller, {\n      method: \"GET\",\n      reqUrl: url\n    });\n    yield put({\n      type: ActionTypes.GET_ITEMS_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: ActionTypes.GET_ITEMS_FAILURE,\n      payload: []\n    });\n  }\n}\nexport default function* root() {\n  yield all([takeLatest(ActionTypes.GET_ITEMS, getItems)]);\n}","map":{"version":3,"sources":["C:/Users/Firas Chikhaoui/Desktop/pim/react(front)/trackmedds_front_end/src/redux/sagas/getItem.js"],"names":["all","call","put","takeLatest","select","ActionTypes","APICaller","getItems","filters","state","itemsReducer","search","region","limit","skip","url","length","trim","toLowerCase","response","method","reqUrl","type","GET_ITEMS_SUCCESS","payload","data","err","GET_ITEMS_FAILURE","root","GET_ITEMS"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAMC,OAAO,GAAG,MAAMJ,MAAM,CAACK,KAAK,IAAIA,KAAK,CAACC,YAAN,CAAmBF,OAA7B,CAA5B;AACA,MAAI;AACFG,IAAAA,MAAM,GAAG,EADP;AAEH;AACD;AACEC,IAAAA,MAAM,GAAG,EAJP;AAKFC,IAAAA,KAAK,GAAG,EALN;AAMFC,IAAAA,IAAI,GAAG;AANL,MAOAN,OAPJ;AAQA,MAAIO,GAAG,GAAI,cAAaF,KAAM,EAA9B;;AACA,MAAIC,IAAJ,EAAU;AACRC,IAAAA,GAAG,GAAI,GAAEA,GAAI,UAASD,IAAK,EAA3B;AACD;;AACD,MAAIH,MAAM,CAACK,MAAP,IAAiBJ,MAArB,EAA6B;AAC3BD,IAAAA,MAAM,GAAGA,MAAM,CAACM,IAAP,GAAcC,WAAd,EAAT;AACAH,IAAAA,GAAG,GAAI,GAAEA,GAAI,SAAQJ,MAAO,WAAUC,MAAO,EAA7C;AACD;;AACF,MAAID,MAAM,CAACK,MAAP,IAAiB,CAACJ,MAAtB,EAA8B;AAC3BD,IAAAA,MAAM,GAAGA,MAAM,CAACM,IAAP,GAAcC,WAAd,EAAT;AACAH,IAAAA,GAAG,GAAI,GAAEA,GAAI,SAAQJ,MAAO,EAA5B;AACD;;AACD;AAAC;;;;AAGG;;AACJ,MAAIA,MAAM,CAACK,MAAP,KAAgB,CAAhB,IAAoBJ,MAAxB,EAAgC;AAC9BG,IAAAA,GAAG,GAAI,GAAEA,GAAI,WAAUH,MAAO,EAA9B;AACD;;AAED,MAAI;AACF,UAAMO,QAAQ,GAAG,MAAMlB,IAAI,CAACK,SAAD,EAAY;AAAEc,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,MAAM,EAAEN;AAAzB,KAAZ,CAA3B;AACA,UAAMb,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEjB,WAAW,CAACkB,iBADV;AAERC,MAAAA,OAAO,EAAEL,QAAQ,CAACM;AAFV,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMxB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEjB,WAAW,CAACsB,iBADV;AAERH,MAAAA,OAAO,EAAE;AAFD,KAAD,CAAT;AAID;AACF;AAED,eAAe,UAAUI,IAAV,GAAiB;AAC9B,QAAM5B,GAAG,CAAC,CAACG,UAAU,CAACE,WAAW,CAACwB,SAAb,EAAwBtB,QAAxB,CAAX,CAAD,CAAT;AACD","sourcesContent":["import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\r\nimport ActionTypes from \"../constants/ActionTypes\";\r\nimport APICaller from \"utils/APICaller\";\r\n\r\nexport function* getItems() {\r\n  const filters = yield select(state => state.itemsReducer.filters);\r\n  let {\r\n    search = \"\",\r\n   // sort = \"\",\r\n  //  order = \"\",\r\n    region = \"\",\r\n    limit = 40,\r\n    skip = 0\r\n  } = filters;\r\n  let url = `list?limit=${limit}`;\r\n  if (skip) {\r\n    url = `${url}&start=${skip}`;\r\n  }\r\n  if (search.length && region) {\r\n    search = search.trim().toLowerCase();\r\n    url = `${url}&name=${search}&region=${region}`;\r\n  }\r\n if (search.length && !region) {\r\n    search = search.trim().toLowerCase();\r\n    url = `${url}&name=${search}`;\r\n  }\r\n  {/*if (sort.length || order.length) {\r\n    sort = sort && order ? `${sort},${order}` : \"\";\r\n    url = `${url}&sort=${sort}`;\r\n  }*/}\r\n  if (search.length===0 &&region) {\r\n    url = `${url}&region=${region}`;\r\n  }\r\n  \r\n  try {\r\n    const response = yield call(APICaller, { method: \"GET\", reqUrl: url });\r\n    yield put({\r\n      type: ActionTypes.GET_ITEMS_SUCCESS,\r\n      payload: response.data\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ActionTypes.GET_ITEMS_FAILURE,\r\n      payload: []\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* root() {\r\n  yield all([takeLatest(ActionTypes.GET_ITEMS, getItems)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}