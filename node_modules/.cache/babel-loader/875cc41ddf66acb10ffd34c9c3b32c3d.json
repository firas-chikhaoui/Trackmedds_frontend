{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Firas Chikhaoui\\\\Desktop\\\\Nouveau dossier\\\\trackmedds_front_end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { api_response } from \"./common\";\nimport isEmpty from \"lodash/isEmpty\";\nimport orderBy from \"lodash/orderBy\";\nexport const APIhandler = options => {\n  let params = {}; // get url params\n\n  const routeParams = options.reqUrl.split(\"?\");\n\n  if (routeParams.length > 1) {\n    let paramsStr = routeParams[1];\n    paramsStr.split(\"&\").map(data => {\n      let keyValue = data.split(\"=\");\n      params[keyValue[0]] = keyValue[1] ? keyValue[1] : \"\";\n      return \"\";\n    });\n  } // name: \"dsds\"\n  // limit: \"20\"\n  // skip: \"0\"\n  // sort: \"-season\"\n\n\n  return new Promise(async (resolve, reject) => {\n    // console.log(\"params\", params);\n    if (api_response.length) {\n      if (!isEmpty(params)) {\n        let response = api_response;\n\n        if (!isEmpty(params.name)) {\n          response = response.filter(item => item.name.toLowerCase().includes(params.name.toLowerCase()));\n        }\n\n        if (!isEmpty(params.region)) {\n          response = response.filter(item => item.neighbourhood.toLowerCase().includes(params.region.toLowerCase()));\n        }\n\n        if (params.sort) {\n          const _params$sort$split = params.sort.split(\",\"),\n                _params$sort$split2 = _slicedToArray(_params$sort$split, 2),\n                sort = _params$sort$split2[0],\n                order = _params$sort$split2[1];\n\n          response = orderBy(response, sort, order);\n        }\n\n        return resolve({\n          data: {\n            totalElements: response.length,\n            content: response\n          }\n        });\n      } else {\n        return resolve({\n          data: {\n            totalElements: api_response.length,\n            content: api_response\n          }\n        });\n      }\n    } else {\n      return reject({});\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Firas Chikhaoui/Desktop/Nouveau dossier/trackmedds_front_end/src/utils/method.js"],"names":["api_response","isEmpty","orderBy","APIhandler","options","params","routeParams","reqUrl","split","length","paramsStr","map","data","keyValue","Promise","resolve","reject","response","name","filter","item","toLowerCase","includes","region","neighbourhood","sort","order","totalElements","content"],"mappings":";AAAA,SAASA,YAAT,QAA6B,UAA7B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,IAAI;AACnC,MAAIC,MAAM,GAAG,EAAb,CADmC,CAEnC;;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACG,MAAR,CAAeC,KAAf,CAAqB,GAArB,CAApB;;AACA,MAAIF,WAAW,CAACG,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,QAAIC,SAAS,GAAGJ,WAAW,CAAC,CAAD,CAA3B;AACAI,IAAAA,SAAS,CAACF,KAAV,CAAgB,GAAhB,EAAqBG,GAArB,CAAyBC,IAAI,IAAI;AAC/B,UAAIC,QAAQ,GAAGD,IAAI,CAACJ,KAAL,CAAW,GAAX,CAAf;AACAH,MAAAA,MAAM,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAN,GAAsBA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAtB,GAA4B,EAAlD;AACA,aAAO,EAAP;AACD,KAJD;AAKD,GAXkC,CAanC;AACA;AACA;AACA;;;AACA,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C;AACA,QAAIhB,YAAY,CAACS,MAAjB,EAAyB;AACvB,UAAI,CAACR,OAAO,CAACI,MAAD,CAAZ,EAAsB;AACpB,YAAIY,QAAQ,GAAGjB,YAAf;;AACA,YAAI,CAACC,OAAO,CAACI,MAAM,CAACa,IAAR,CAAZ,EAA2B;AACzBD,UAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgBC,IAAI,IAC7BA,IAAI,CAACF,IAAL,CAAUG,WAAV,GAAwBC,QAAxB,CAAiCjB,MAAM,CAACa,IAAP,CAAYG,WAAZ,EAAjC,CADS,CAAX;AAGD;;AACD,YAAI,CAACpB,OAAO,CAACI,MAAM,CAACkB,MAAR,CAAZ,EAA6B;AAC3BN,UAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgBC,IAAI,IAC7BA,IAAI,CAACI,aAAL,CAAmBH,WAAnB,GAAiCC,QAAjC,CAA0CjB,MAAM,CAACkB,MAAP,CAAcF,WAAd,EAA1C,CADS,CAAX;AAGD;;AACD,YAAIhB,MAAM,CAACoB,IAAX,EAAiB;AAAA,qCACOpB,MAAM,CAACoB,IAAP,CAAYjB,KAAZ,CAAkB,GAAlB,CADP;AAAA;AAAA,gBACRiB,IADQ;AAAA,gBACFC,KADE;;AAGfT,UAAAA,QAAQ,GAAGf,OAAO,CAACe,QAAD,EAAWQ,IAAX,EAAiBC,KAAjB,CAAlB;AACD;;AACD,eAAOX,OAAO,CAAC;AACbH,UAAAA,IAAI,EAAE;AAAEe,YAAAA,aAAa,EAAEV,QAAQ,CAACR,MAA1B;AAAkCmB,YAAAA,OAAO,EAAEX;AAA3C;AADO,SAAD,CAAd;AAGD,OApBD,MAoBO;AACL,eAAOF,OAAO,CAAC;AACbH,UAAAA,IAAI,EAAE;AAAEe,YAAAA,aAAa,EAAE3B,YAAY,CAACS,MAA9B;AAAsCmB,YAAAA,OAAO,EAAE5B;AAA/C;AADO,SAAD,CAAd;AAGD;AACF,KA1BD,MA0BO;AACL,aAAOgB,MAAM,CAAC,EAAD,CAAb;AACD;AACF,GA/BM,CAAP;AAgCD,CAjDM","sourcesContent":["import { api_response } from \"./common\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport orderBy from \"lodash/orderBy\";\r\n\r\nexport const APIhandler = options => {\r\n  let params = {};\r\n  // get url params\r\n  const routeParams = options.reqUrl.split(\"?\");\r\n  if (routeParams.length > 1) {\r\n    let paramsStr = routeParams[1];\r\n    paramsStr.split(\"&\").map(data => {\r\n      let keyValue = data.split(\"=\");\r\n      params[keyValue[0]] = keyValue[1] ? keyValue[1] : \"\";\r\n      return \"\";\r\n    });\r\n  }\r\n\r\n  // name: \"dsds\"\r\n  // limit: \"20\"\r\n  // skip: \"0\"\r\n  // sort: \"-season\"\r\n  return new Promise(async (resolve, reject) => {\r\n    // console.log(\"params\", params);\r\n    if (api_response.length) {\r\n      if (!isEmpty(params)) {\r\n        let response = api_response;\r\n        if (!isEmpty(params.name)) {\r\n          response = response.filter(item =>\r\n            item.name.toLowerCase().includes(params.name.toLowerCase())\r\n          );\r\n        }\r\n        if (!isEmpty(params.region)) {\r\n          response = response.filter(item =>\r\n            item.neighbourhood.toLowerCase().includes(params.region.toLowerCase())\r\n          );\r\n        }\r\n        if (params.sort) {\r\n          const [sort, order] = params.sort.split(\",\");\r\n\r\n          response = orderBy(response, sort, order);\r\n        }\r\n        return resolve({\r\n          data: { totalElements: response.length, content: response }\r\n        });\r\n      } else {\r\n        return resolve({\r\n          data: { totalElements: api_response.length, content: api_response }\r\n        });\r\n      }\r\n    } else {\r\n      return reject({});\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}